# Multi-Tenant Video Processor - File Context

## Database Schema

- `src/server/db/schema.ts`: Defines the database schema using Drizzle ORM
  - `users`: User accounts with NextAuth compatibility
  - `workspaces`: Multi-tenant workspaces with branding options (name, slug, logoUrl, primaryColor, customDomain, credits)
  - `memberships`: Links users to workspaces with roles
  - `videoJobs`: Tracks video processing jobs (status, URLs, duration, etc.)
  - `payments`: Records Stripe payments and credits
  - Plus NextAuth tables (accounts, sessions, verificationTokens)

## Authentication & Multi-Tenancy

- `src/server/auth/config.ts`: NextAuth.js configuration with Google and demo credential providers
- `src/server/auth/index.ts`: Exports NextAuth handlers and session utilities
- `src/middleware.ts`: Domain-aware middleware for multi-tenancy, extracts host and sets workspace context
- `src/contexts/WorkspaceContext.tsx`: React context for workspace data (id, slug, name, primaryColor, logoUrl, credits)
- `src/app/api/workspace/info/route.ts`: API route to fetch workspace info based on domain/headers

## White-Label Theming

- `src/contexts/ThemeContext.tsx`: Applies workspace branding via CSS variables
- `src/components/ui/logo.tsx`: Displays either custom workspace logo or default text
- `src/styles/globals.css`: Defines theme variables including --primary for white-labeling

## Video Processing

- `src/app/api/upload/route.ts`: Handles video file uploads (validates type/size, saves to filesystem)
- `src/server/api/routers/video.ts`: tRPC router for video operations (createJob, getJobs, updateStatus)
- `src/server/queue/videoQueue.ts`: BullMQ queue setup for video processing jobs
- `src/workers/videoProcessor.ts`: Worker that processes videos using FFmpeg
  - Detects silences using silencedetect filter
  - Removes silent segments and concatenates remaining parts
  - Updates job status in database

## Payment Processing

- `src/server/api/routers/payment.ts`: tRPC router for Stripe operations (createCheckoutSession, getPayments)
- `src/app/api/webhooks/stripe/route.ts`: Webhook handler for Stripe events
  - Processes checkout.session.completed to add credits
  - Updates payment status in database

## UI Components

- `src/components/video/UploadZone.tsx`: Drag-and-drop video upload with progress tracking
- `src/components/video/JobList.tsx`: Displays video jobs with status, polling for updates
- `src/app/(app)/dashboard/page.tsx`: Main dashboard with upload zone and job list
- `src/app/(app)/settings/page.tsx`: Workspace settings for branding (name, logo, color, domain)
- `src/app/page.tsx`: Landing page with product info and pricing

## API Routes

- `src/app/api/auth/[...nextauth]/route.ts`: NextAuth API routes
- `src/app/api/upload/route.ts`: File upload endpoint
- `src/app/api/webhooks/stripe/route.ts`: Stripe webhook endpoint
- `src/app/api/workspace/info/route.ts`: Workspace info endpoint
- `src/app/api/trpc/[trpc]/route.ts`: tRPC API endpoint

## tRPC Routers

- `src/server/api/routers/video.ts`: Video job operations
- `src/server/api/routers/workspace.ts`: Workspace management
- `src/server/api/routers/payment.ts`: Payment and credit operations
- `src/server/api/root.ts`: Combines all routers

## Setup & Deployment

- `scripts/seed.ts`: Seeds database with default workspace and demo user
- `scripts/setup-dev.sh`: Sets up development environment with placeholder values
- `drizzle.config.ts`: Drizzle ORM configuration
- `Dockerfile`: Main application container
- `Dockerfile.worker`: Worker container with FFmpeg
- `docker-compose.yml`: Local development setup with PostgreSQL and Redis
